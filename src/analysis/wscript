#! python

#doppelte for schleife f√ºr effective for type in lasso ,fused, fusion:
def build(ctx):

    for reg in 'lasso', 'fused', 'fusion':
        for sim in 'large_blocks', 'blocks_few_spikes', 'small_blocks', 'spikes':
            ctx(
                features='run_py_script',
                source='grid_cross_validation.py',
                deps=[
                    ctx.path_to(ctx, 'OUT_DATA', 'data_{}.pickle'.format(sim)),
                    ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(sim)),
                ],
                target=ctx.path_to(ctx, 'OUT_ANALYSIS', 'cv_{}_{}.pickle'.format(reg, sim)),
                append=[reg, sim]
                )

    for reg in 'lasso', 'fused', 'fusion':
        for sim in 'large_blocks', 'blocks_few_spikes', 'small_blocks', 'spikes':
            ctx(
                features='run_py_script',
                source='estimation.py',
                deps=[
                    ctx.path_to(ctx, 'OUT_DATA', 'data_{}.pickle'.format(sim)),
                    ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(sim)),
                    ctx.path_to(ctx, 'OUT_ANALYSIS', 'cv_{}_{}.pickle'.format(reg, sim)),
                ],
                target=ctx.path_to(ctx, 'OUT_ANALYSIS', 'simulation_{}_{}.pickle'
                                   .format(reg, sim)),
                append=[reg, sim]
                )

    for reg in 'lasso', 'fused', 'fusion':
        for sim in 'large_blocks', 'blocks_few_spikes', 'small_blocks', 'spikes':
            ctx(
                features='run_py_script',
                source='analysis_of_simulations.py',
                deps=[
                    ctx.path_to(ctx, 'OUT_ANALYSIS', 'simulation_{}_{}.pickle'
                                .format(reg, sim)),
                    ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(sim))
                ],
                target=ctx.path_to(ctx, "OUT_ANALYSIS", "analysis_{}_{}.pickle"
                                   .format(reg, sim)),

                append=[reg, sim]
                )

    # for reg in 'lasso', 'fused', 'fusion':
    #     for sim in 'large_blocks', 'blocks_few_spikes', 'small_blocks', 'spikes':
    #         ctx(
    #             features='run_py_script',
    #             source='monte_carlo.py',
    #             deps=[
    #                 ctx.path_to(ctx, 'OUT_ANALYSIS', 'simulation_{}_{}.pickle'
    #                             .format(reg, sim)),
    #                 ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(sim))
    #             ],
    #             target= ctx.path_to(ctx, "OUT_FIGURES", "monte_carlo_{}_{}.png"ulation_f
    #                                 .format(reg, sim)),
    #
    #             append=[reg, sim]
    #             )
    ctx(
        features='run_py_script',
        source='monte_carlo.py',
        deps=[
            ctx.path_to(ctx, 'OUT_ANALYSIS', 'simulation_fused_large_blocks.pickle'
                        ),
            ctx.path_to(ctx, 'IN_MODEL_SPECS', 'large_blocks.json')
        ],
        target= ctx.path_to(ctx, "OUT_FIGURES", "monte_carlo_fused_large_blocks.png"
                            )
        )
